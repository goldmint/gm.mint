package fee

import (
	"testing"

	"github.com/void616/gm-sumuslib/amount"
)

func TestGoldFee(t *testing.T) {
	tests := []struct {
		mnt  string
		gold string
		fee  string
		name string
	}{
		// Balance, MNT              Amount, GOLD                Fee, GOLD                Name
		{"00000.000000000000000000", "00000.000000000000000001", "00.000020000000000000", "[0, 10)"},
		{"00000.000000000000000000", "00000.000000000000033333", "00.000020000000000000", "[0, 10)"},
		{"00000.000000000000000000", "00000.000000001111088889", "00.000020000000000000", "[0, 10)"},
		{"00000.000000000000000000", "00000.000037035925937037", "00.000020000000000000", "[0, 10)"},
		{"00000.000000000000000000", "00001.234518519259250000", "00.001234518519259250", "[0, 10)"},
		{"00000.000000000000000000", "41150.205802468700000000", "41.150205802468700000", "[0, 10)"},
		{"00009.999999999999999999", "75335.123456789000000000", "75.335123456789000000", "[0, 10)"},
		{"00010.000000000000000000", "00000.000000000000000001", "00.000020000000000000", "[10,1000)"},
		{"00010.000000000000000000", "00000.000000000000033333", "00.000020000000000000", "[10,1000)"},
		{"00010.000000000000000000", "00000.000000001111088889", "00.000020000000000000", "[10,1000)"},
		{"00010.000000000000000000", "00000.000037035925937037", "00.000020000000000000", "[10,1000)"},
		{"00010.000000000000000000", "00001.234518519259250000", "00.000370355555777775", "[10,1000)"},
		{"00010.000000000000000000", "41150.205802468700000000", "12.345061740740610000", "[10,1000)"},
		{"00999.999999999999999999", "75335.123456789000000000", "22.600537037036700000", "[10,1000)"},
		{"01000.000000000000000000", "00000.000000000000000001", "00.000020000000000000", "[1000,10000)"},
		{"01000.000000000000000000", "00000.000000000000033333", "00.000020000000000000", "[1000,10000)"},
		{"01000.000000000000000000", "00000.000000001111088889", "00.000020000000000000", "[1000,10000)"},
		{"01000.000000000000000000", "00000.000037035925937037", "00.000020000000000000", "[1000,10000)"},
		{"01000.000000000000000000", "00001.234518519259250000", "00.000037035555577778", "[1000,10000)"},
		{"01000.000000000000000000", "41150.205802468700000000", "01.234506174074061000", "[1000,10000)"},
		{"09999.999999999999999999", "75335.123456789000000000", "02.260053703703670000", "[1000,10000)"},
		{"10000.000000000000000000", "00000.000000000000000001", "00.000020000000000000", "[10000,...)"},
		{"10000.000000000000000000", "00000.000000000000033333", "00.000020000000000000", "[10000,...)"},
		{"10000.000000000000000000", "00000.000000001111088889", "00.000020000000000000", "[10000,...)"},
		{"10000.000000000000000000", "00000.000037035925937037", "00.000020000000000000", "[10000,...)"},
		{"10000.000000000000000000", "00001.234518519259250000", "00.000037035555577778", "[10000,...)"},
		{"10000.000000000000000000", "41150.205802468700000000", "00.002000000000000000", "[10000,...)"},
		{"99999.999999999999999999", "75335.123456789000000000", "00.002000000000000000", "[10000,...)"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := amount.NewFloatString(tt.gold)
			m := amount.NewFloatString(tt.mnt)
			f := amount.NewFloatString(tt.fee)
			if got := GoldFee(g, m); got.Value.Cmp(f.Value) != 0 {
				t.Errorf("GoldFee() = %v, want %v", got.String(), f.String())
			}
		})
	}
}
